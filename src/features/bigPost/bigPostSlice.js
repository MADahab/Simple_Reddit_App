import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const loadComments = createAsyncThunk(
  'bigPost/loadComments',
  async (url) => {
    const data = await fetch(url);
    const json = await data.json();
    return json;
  }
);

export const bigPostSlice = createSlice({
  name: 'bigPost',
  initialState: {  
    main:[], 
    comments: [],
    isLoading: false,
    failed: false
  },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadComments.pending]: (state) => {
      state.isLoading = true;
    },
    [loadComments.fulfilled]: (state, action) => {
      state.isLoading = false;
      state.comments = action.payload[1].data.children;
      state.main = action.payload;
    },
    [loadComments.rejected]: (state, action) => {
        state.failed = true;
        state.isLoading = false;        
        state.main = [];
        state.comments =  [];
      }
  }  
  
});

//[0].data.children[0].data
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectComments = (state) => state.bigPost.comments;
export const selectIsLoading = (state) => state.bigPost.isLoading;
export const selectFailed = (state) => state.bigPost.failed;
export const selectMain = (state) => state.bigPost.main;
export default bigPostSlice.reducer;
